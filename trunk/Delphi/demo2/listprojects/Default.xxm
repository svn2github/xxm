[[@jsonDoc,Windows,Classes,Variants]][[!var
i:integer;
s:string;
f:TFileStream;
u:UTF8String;
d,d1:IJSONDocument;
e:IJSONEnumerator;
sl:TStringList;
<<!doctype html>
<html>
<head>
<style type="text/css">
BODY {font-family: Calibri, Verdana, sans-serif;font-size:12pt;}
</style>
<body>
<h1>xxm</h1>
<p>Projects on this host:</p>
<ul>>

SetLength(s,MAX_PATH);
SetLength(s,GetModuleFileName(HInstance,PChar(s),MAX_PATH));

//TODO: find via context? via config?
//TODO: list via context from handler?
i:=Length(s)+1;
repeat
  dec(i);
  while (i<>0) and (s[i]<>'\') do dec(i);
until (i=0) or (FileExists(Copy(s,1,i)+'xxm.json'));

sl:=TStringList.Create;
try
  sl.Sorted:=true;
  
  d:=JSON;

  f:=TFileStream.Create(Copy(s,1,i)+'xxm.json',fmOpenRead or fmShareDenyWrite);
  try
    i:=f.Size;
    SetLength(u,i);
    if i<>f.Read(u[1],i) then RaiseLastOSError;
    if (i>=3) and (u[1]=#$EF) and (u[2]=#$BB) and (u[3]=#$BF) then
  	  d.Parse(UTF8Decode(Copy(u,4,i-3)))
    else
      if (i>=2) and (u[1]=#$FF) and (u[2]=#$FE) then
  	    d.Parse(PWideChar(@u[1]))
      else
  	    d.Parse(WideString(u));
  finally
    f.Free;
  end;
  
  e:=JSONEnum(d['projects']);
  while e.Next do
   begin
    d1:=JSON(e.Value);
	if VarToStr(d1['alias'])='' then
	 begin
	  s:=e.Key;
	  if LowerCase(s)<>'xxm' then sl.Add(s);
	 end;
   end;
   
  for i:=0 to sl.Count-1 do
   begin
    <li><a href="../[[=sl[i]]]">>=sl[i]<</a></li>
   end;
finally
  sl.Free;
end;

<</ul>
<p>>=Context[csVersion]]] | <a href="http://yoy.be/xxm/">about xxm...</a></p>
</body>
</html>